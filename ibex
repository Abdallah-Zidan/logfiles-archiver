#!/usr/bin/node
const { Command } = require("commander");
const fs = require("fs");
const {
  createFiles,
  startArchiver,
  startJobs,
  startRotater,
  config,
} = require("./src");

Command.prototype.baseDirOption = function () {
  return this.option(
    "-b,--base-dir <baseDir>",
    "specify base directory",
    config.baseDir
  );
};

const program = new Command();
program.version("0.0.1");

program
  .command("create [files]")
  .description("create sample files")
  .baseDirOption()
  .option("-w , --word <word>", "word to fill files with", "'d   ta\\n'")
  .action((files, { baseDir, word }) => {
    const filesArray = files?.split(",");
    createFiles(filesArray, baseDir, word);
  });

program
  .command("rotate")
  .description("rotate logs files")
  .baseDirOption()
  .option(
    "-p,--pattern <pattern>",
    "specify rotation pattern for files",
    config.rotatePattern
  )
  .action(async ({ baseDir, pattern }) => {
    try {
      const result = await startRotater(baseDir, pattern, config.minFileSize);
      console.log(result);
    } catch (error) {
      console.log(error);
    }
  });

program
  .command("archive")
  .description("achive log files")
  .baseDirOption()
  .option("-p,--pattern <pattern>", "specify base pattern", config.basePattern)
  .option(
    "-s,--suffix <suffix>",
    "specify archive pattern suffix",
    config.suffix
  )
  .option("-c --compress <compress>", "compress files", config.compress)
  .option(
    "-k,--skip <skip>",
    "number of skipped months",
    config.numberOfSkipped
  )
  .action(async ({ baseDir, suffix, pattern, compress, skip }) => {
    try {
      const result = await startArchiver({
        baseDir,
        basePattern: pattern,
        compress,
        suffix,
        numberOfSkipped: skip,
      });
      console.log(result);
    } catch (error) {
      console.log(error);
    }
  });

program
  .command("jobs")
  .description(
    "start archive and rotate as cron jobs using ecosystemfile for configurations"
  )
  .action(async () => {
    try {
      await startJobs();
      console.log("scheduled");
    } catch (error) {
      console.log(error);
    }
  });

program
  .command("init")
  .description("create configuration file")
  .action(() => {
    fs.writeFileSync(
      "./config.jsonc",
      `
    {
      "baseDir": "./logs", // base directory where log files are located
      "rotate": {
          "rotatePattern": "feo_[1-9]-out.log", // pattern for globbing log files to be rotated
          "minFileSize": 104857600 // minimum size that file must reach to be rotated in bytes
      },
      "archive": {
          "basePattern": "feo_[0-9]-out__", // base archive globbing pattern
          "suffix": "-[0-9][0-9]_.+.log.?g?z?", // the suffix of the pattern to glob files to e archived
          "numberOfSkipped": 0, // number of months to be skipped
          "compress": false // determine whether to compress the archive or not
      }
  }
    `
    );
  });
program.parse(process.argv);
